import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from scipy.sparse import coo_matrix

# Load and preprocess the dataset (assuming you have a CSV file 'emails.csv' with 'text' and 'label' columns)
data = pd.read_csv(r"E:\CSV FILES\Emails.csv")
X = data['text'].values
y = data['label'].values

# Encode labels (spam/ham) into numerical values
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

# Split dataset into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)

# Further split training data into training and validation sets
X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)

# Convert text to numerical representations using CountVectorizer
vectorizer = CountVectorizer()
X_train_vec = vectorizer.fit_transform(X_train)
X_val_vec = vectorizer.transform(X_val)
X_test_vec = vectorizer.transform(X_test)

# Reorder the indices of sparse matrices
def reorder_sparse_matrix(matrix):
    coo = matrix.tocoo()
    coo.sum_duplicates()  # Ensure correct ordering
    return coo.tocsr()

X_train_vec = reorder_sparse_matrix(X_train_vec)
X_val_vec = reorder_sparse_matrix(X_val_vec)
X_test_vec = reorder_sparse_matrix(X_test_vec)

# Build the neural network model
model = Sequential([
    Dense(128, input_dim=X_train_vec.shape[1], activation='relu'),
    Dropout(0.3),
    Dense(64, activation='relu'),
    Dropout(0.3),
    Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# Train the model
model.fit(X_train_vec, y_train, epochs=10, batch_size=32, validation_data=(X_val_vec, y_val))

# Function to predict spam or not spam
def predict_spam(input_text):
    input_vec = vectorizer.transform([input_text])
    input_vec = reorder_sparse_matrix(input_vec)
    prediction = model.predict(input_vec)
    is_spam = "Spam" if prediction[0][0] > 0.5 else "Not Spam"
    return is_spam

# Interactive prediction
while True:
    user_input = input("Enter a message (or 'exit' to quit): ")
    if user_input.lower() == 'exit':
        break
    else:
        result = predict_spam(user_input)
        print(f'This message is classified as: {result}')
